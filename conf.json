{"slots":{"0":{"name":"output","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--Set globals fields\n--[[_mesh = {\n    size = {8,6,12},\n    -- X | Y | Z\n    vertices = {\n        {-0.5,-0.5,-0.5,-0.5,0.5,0.5,0.5,0.5},\n        {-0.5,-0.5,0.5,0.5,-0.5,-0.5,0.5,0.5},\n        {-0.5,0.5,-0.5,0.5,-0.5,0.5,-0.5,0.5}\n    },\n    -- X | Y | Z | DOT\n    normals = {\n        {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0},\n        { 0.0, 1.0, 0.0,-1.0, 0.0, 0.0},\n        { 0.0, 0.0, 0.0, 0.0,-1.0, 1.0},\n        {   0,   0,   0,   0,   0,   0,}\n    },\n    colors = {\n        {  0,  0,250},\n        {  0,125,125},\n        {  0,250,  0},\n        {125,125,  0},\n        {250,  0,  0},\n        {125,  0,125}\n    },\n    -- VERTICES IDS | NORMAL ID\n    shapes = {\n        {\n            { 2, 3, 1},\n            { 4, 7, 3},\n            { 8, 5, 7},\n            { 6, 1, 5},\n            { 7, 1, 3},\n            { 4, 6, 8},\n            { 2, 4, 3},\n            { 4, 8, 7},\n            { 8, 6, 5},\n            { 6, 2, 1},\n            { 7, 5, 1},\n            { 4, 2, 6}\n        },\n        {1,2,3,4,5,6,1,2,3,4,5,6}\n    }\n}\n\n--[[_steps = 16\nlocal vX, vY, vZ = mesh.vertices[1], mesh.vertices[2], mesh.vertices[3]\nlocal sV, sN = mesh.shapes[1], mesh.shapes[2]\nfor i = 1, _steps do\n    local d = i*(2*math.pi)/_steps\n    local id = #vX+1\n    \n    vX[id] = math.cos(d)\n    vY[id] = math.sin(d)\n    vZ[id] = 0.25*math.sin(3*d)\n    \n    sV[#sV+1] = {id, i == _steps and id-(_steps-1) or id+1}\n    sN[#sN+1] = nil\nend]]\n\n\n--[[_mesh = {\n    vertices = {\n        {0.0,0.0904,-0.0345,-0.1118,-0.0345,0.0904,0.0345,-0.0904,-0.0904,0.0345,0.1118,0.0,-0.0291,-0.0203,-0.0097,0.0253,0.0531,0.0761,0.0664,0.0328,-0.0037,0.1015,0.1063,0.1015,0.0253,0.0531,0.0761,-0.0941,-0.0657,-0.0313,-0.0604,-0.086,-0.1038,-0.0291,-0.0203,-0.0097,-0.1038,-0.086,-0.0604,-0.0037,0.0328,0.0664,0.1195,0.1188,0.1075,0.1075,0.1188,0.1195,0.0194,0.0,-0.0194,0.0858,0.0734,0.0545,-0.1075,-0.1188,-0.1195,-0.0545,-0.0734,-0.0858,-0.0858,-0.0734,-0.0545,-0.1195,-0.1188,-0.1075,0.0545,0.0734,0.0858,-0.0194,0.0,0.0194,0.1038,0.086,0.0604,0.0037,-0.0328,-0.0664,-0.1015,-0.1063,-0.1015,-0.0664,-0.0328,0.0037,0.0604,0.086,0.1038,0.0097,0.0203,0.0291,0.0941,0.0657,0.0313,-0.0253,-0.0531,-0.0761,-0.0253,-0.0531,-0.0761,0.0097,0.0203,0.0291,0.0452,0.0797,0.0559,-0.0172,-0.0065,-0.0452,-0.0559,-0.0838,-0.0838,-0.0172,-0.0452,-0.0065,0.0452,0.0559,0.0797,0.1077,0.1011,0.0838,-0.0172,-0.0386,-0.0559,-0.1184,-0.125,-0.1184,-0.0559,-0.0386,-0.0172,0.0838,0.1011,0.1077,0.0386,0.0559,0.0172,-0.1011,-0.0838,-0.1077,-0.1011,-0.1077,-0.0838,0.0386,0.0172,0.0559,0.125,0.1184,0.1184,0.0452,0.0172,0.0065,-0.0559,-0.0452,-0.0797,-0.0797,-0.0452,-0.0559,0.0838,0.0838,0.0559,0.0065,0.0172,0.0452},\n        {0.0,-0.0657,-0.1063,0.0,0.1063,0.0657,-0.1063,-0.0657,0.0657,0.1063,0.0,0.0,-0.0895,-0.0624,-0.0298,-0.0184,-0.0386,-0.0553,-0.0852,-0.1011,-0.108,0.0369,0.0,-0.0369,0.0184,0.0386,0.0553,0.0,0.0,0.0,-0.0895,-0.0625,-0.0298,0.0895,0.0624,0.0298,0.0298,0.0625,0.0895,0.108,0.1011,0.0852,-0.0184,-0.0386,-0.0553,0.0553,0.0386,0.0184,-0.1194,-0.125,-0.1194,-0.0852,-0.1011,-0.108,-0.0553,-0.0386,-0.0184,-0.108,-0.1011,-0.0852,0.0852,0.1011,0.108,0.0184,0.0386,0.0553,0.108,0.1011,0.0852,0.1194,0.125,0.1194,-0.0298,-0.0625,-0.0895,-0.108,-0.1011,-0.0852,-0.0369,0.0,0.0369,0.0852,0.1011,0.108,0.0895,0.0625,0.0298,-0.0298,-0.0624,-0.0895,0.0,0.0,0.0,-0.0184,-0.0386,-0.0553,0.0184,0.0386,0.0553,0.0298,0.0624,0.0895,0.0328,0.0328,0.0657,0.0531,0.086,0.0734,0.0,0.0203,-0.0203,-0.0531,-0.0734,-0.086,-0.0328,-0.0657,-0.0328,0.0531,0.0734,0.086,0.1188,0.1188,0.1063,0.0203,-0.0,-0.0203,-0.1063,-0.1188,-0.1188,-0.086,-0.0734,-0.0531,0.1188,0.1063,0.1188,0.0734,0.086,0.0531,-0.0734,-0.0531,-0.086,-0.1188,-0.1188,-0.1063,0.0,-0.0203,0.0203,0.0734,0.0531,0.086,0.0657,0.0328,0.0328,-0.0328,-0.0328,-0.0657,0.0203,-0.0203,-0.0,-0.086,-0.0531,-0.0734},\n        {-0.125,-0.0559,-0.0559,-0.0559,-0.0559,-0.0559,0.0559,0.0559,0.0559,0.0559,0.0559,0.125,-0.0821,-0.1063,-0.1209,-0.1209,-0.1063,-0.0821,-0.0627,-0.0657,-0.0627,-0.0627,-0.0657,-0.0627,-0.1209,-0.1063,-0.0821,-0.0821,-0.1063,-0.1209,-0.0627,-0.0657,-0.0627,-0.0821,-0.1063,-0.1209,-0.0627,-0.0657,-0.0627,-0.0627,-0.0657,-0.0627,0.0313,-0.0,-0.0313,-0.0313,0.0,0.0313,0.0313,-0.0,-0.0313,-0.0313,0.0,0.0313,0.0313,-0.0,-0.0313,-0.0313,0.0,0.0313,0.0313,-0.0,-0.0313,-0.0313,0.0,0.0313,0.0313,-0.0,-0.0313,-0.0313,0.0,0.0313,0.0627,0.0657,0.0627,0.0627,0.0657,0.0627,0.0627,0.0657,0.0627,0.0627,0.0657,0.0627,0.0627,0.0657,0.0627,0.1209,0.1063,0.0821,0.0821,0.1063,0.1209,0.1209,0.1063,0.0821,0.1209,0.1063,0.0821,0.1209,0.1063,0.0821,0.1118,0.0904,0.0904,0.1118,0.0904,0.0904,0.1118,0.0904,0.0904,0.1118,0.0904,0.0904,0.1118,0.0904,0.0904,0.0345,0.0,0.0345,0.0345,-0.0,0.0345,0.0345,0.0,0.0345,0.0345,-0.0,0.0345,0.0345,-0.0,0.0345,-0.0,-0.0345,-0.0345,-0.0,-0.0345,-0.0345,0.0,-0.0345,-0.0345,0.0,-0.0345,-0.0345,0.0,-0.0345,-0.0345,-0.0904,-0.1118,-0.0904,-0.0904,-0.1118,-0.0904,-0.0904,-0.1118,-0.0904,-0.0904,-0.0904,-0.1118,-0.0904,-0.1118,-0.0904}\n    },\n    normals = {\n        {0.0482,0.723,-0.1261,-0.1261,0.0482,0.8193,-0.1387,-0.905,-0.4206,0.6451,0.7711,-0.2945,-0.9532,-0.2945,0.7711,0.3427,-0.6153,-0.723,0.1685,0.8271,0.1261,0.3912,0.6441,0.2334,0.2079,0.5168,0.4911,0.3338,0.286,0.752,0.7261,0.5987,0.5513,0.3936,0.3427,-0.0482,0.0339,0.1121,-0.0891,-0.2627,-0.0144,-0.1876,-0.3105,-0.4674,0.0711,-0.1026,-0.2287,-0.3854,-0.5087,-0.6153,-0.1558,-0.3702,-0.5749,-0.2885,-0.3702,-0.5257,-0.6071,-0.5257,-0.5749,-0.7081,-0.7895,-0.74,-0.7895,-0.7081,-0.723,-0.0482,-0.2627,-0.4674,-0.0891,0.0339,-0.3105,-0.1876,-0.0144,0.1121,-0.5087,-0.3854,-0.2287,-0.1026,0.0711,0.1685,0.1261,0.2079,0.286,0.2334,0.3912,0.3338,0.4911,0.5168,0.6441,0.3936,0.5513,0.5987,0.7261,0.752,0.8271,0.905,0.9366,0.8883,0.8963,0.8039,0.8869,0.7947,0.7544,0.6291,0.7972,0.7049,0.7038,0.5785,0.5379,0.4206,0.1387,0.0004,-0.156,0.016,-0.1323,-0.1557,-0.3035,-0.2882,-0.4151,-0.3045,-0.4526,-0.4519,-0.5791,-0.5638,-0.6451,-0.8193,-0.9363,-0.9846,-0.8864,-0.8857,-0.9831,-0.9822,-0.9325,-0.8857,-0.9854,-0.9846,-0.9831,-0.9363,-0.8864,-0.8193,-0.6451,-0.5791,-0.4526,-0.5638,-0.4151,-0.4519,-0.3035,-0.2882,-0.1323,-0.3045,-0.156,-0.1557,0.0004,0.016,0.1387,0.4206,0.5785,0.7049,0.5379,0.6291,0.7038,0.7947,0.7544,0.8039,0.7972,0.8883,0.8869,0.9366,0.8963,0.905,0.2945,0.4526,0.5791,0.3045,0.156,0.4519,0.3035,0.1557,-0.0004,0.5638,0.4151,0.2882,0.1323,-0.016,-0.1387,-0.7711,-0.7049,-0.5785,-0.7972,-0.8883,-0.7038,-0.7947,-0.8869,-0.9366,-0.5379,-0.6291,-0.7544,-0.8039,-0.8963,-0.905,-0.7711,-0.8883,-0.9366,-0.7972,-0.7049,-0.8869,-0.7947,-0.7038,-0.5785,-0.8963,-0.8039,-0.7544,-0.6291,-0.5379,-0.4206,0.2945,0.156,-0.0004,0.3045,0.4526,0.1557,0.3035,0.4519,0.5791,-0.016,0.1323,0.2882,0.4151,0.5638,0.6451,0.9532,0.9846,0.9363,0.9854,0.9846,0.9831,0.9822,0.9831,0.9363,0.8864,0.8857,0.9325,0.8857,0.8864,0.8193,0.6153,0.4674,0.2627,0.5087,0.3854,0.3105,0.1876,0.2287,0.1026,0.0891,-0.0339,0.0144,-0.1121,-0.0711,-0.1685,-0.3427,-0.286,-0.2079,-0.3936,-0.5513,-0.3338,-0.4911,-0.5987,-0.7261,-0.2334,-0.3912,-0.5168,-0.6441,-0.752,-0.8271,-0.8271,-0.6441,-0.3912,-0.752,-0.7261,-0.5168,-0.4911,-0.5987,-0.5513,-0.2334,-0.2079,-0.3338,-0.286,-0.3936,-0.3427,0.723,0.7895,0.7895,0.7081,0.5749,0.74,0.6071,0.5257,0.3702,0.7081,0.5749,0.5257,0.3702,0.2885,0.1558,-0.1685,-0.1121,-0.0339,-0.0711,0.1026,0.0144,0.1876,0.2287,0.3854,0.0891,0.2627,0.3105,0.4674,0.5087,0.6153},\n        {-0.1482,-0.4121,-0.0916,0.0916,0.1482,-0.4121,-0.9065,-0.1482,0.8149,0.6519,-0.5603,-0.9065,0.0,0.9065,0.5603,-0.7583,-0.5603,0.4121,0.8149,0.0916,0.0916,0.0915,0.0915,0.1696,0.3438,0.183,0.3568,0.435,0.5843,0.1696,0.3438,0.435,0.5843,0.6628,0.7583,0.1482,0.4003,0.6409,0.2743,0.3039,0.5481,0.5773,0.4519,0.4526,0.7676,0.7968,0.7038,0.7049,0.5792,0.5603,0.0,0.156,0.3046,0.0,-0.156,0.1557,0.0,-0.1557,-0.3046,0.3049,0.1487,0.0,-0.1487,-0.3049,-0.4121,-0.1482,-0.3039,-0.4526,-0.2743,-0.4003,-0.4519,-0.5773,-0.5481,-0.6409,-0.5792,-0.7049,-0.7038,-0.7968,-0.7676,-0.8149,-0.0916,-0.3438,-0.5843,-0.1696,-0.0915,-0.435,-0.3568,-0.183,-0.0915,-0.6628,-0.5843,-0.435,-0.3438,-0.1696,-0.0916,0.1482,0.3039,0.4526,0.2743,0.4003,0.4519,0.5773,0.5481,0.6409,0.5792,0.7049,0.7038,0.7968,0.7676,0.8149,0.9065,0.9846,0.9846,0.9372,0.8883,0.9831,0.9342,0.8869,0.7964,0.9372,0.8883,0.8869,0.7964,0.7488,0.6519,0.4121,0.3046,0.156,0.3049,0.1487,0.1557,-0.0,0.0,-0.1487,0.0,-0.156,-0.1557,-0.3046,-0.3049,-0.4121,-0.6519,-0.7964,-0.8883,-0.7488,-0.7964,-0.8869,-0.9342,-0.8869,-0.8883,-0.9372,-0.9846,-0.9831,-0.9846,-0.9372,-0.9065,-0.8149,-0.7968,-0.7049,-0.7676,-0.6409,-0.7038,-0.5773,-0.5481,-0.4003,-0.5792,-0.4526,-0.4519,-0.3039,-0.2744,-0.1482,0.9065,0.8883,0.7964,0.9372,0.9846,0.8869,0.9342,0.9831,0.9846,0.7488,0.7964,0.8869,0.8883,0.9372,0.9065,0.5603,0.7049,0.7968,0.5792,0.4526,0.7038,0.5774,0.4519,0.3039,0.7676,0.6409,0.5481,0.4003,0.2744,0.1482,-0.5603,-0.4526,-0.3039,-0.5792,-0.7049,-0.4519,-0.5774,-0.7038,-0.7968,-0.2744,-0.4003,-0.5481,-0.6409,-0.7676,-0.8149,-0.9065,-0.9846,-0.9846,-0.9372,-0.8883,-0.9831,-0.9342,-0.8869,-0.7964,-0.9372,-0.8883,-0.8869,-0.7964,-0.7488,-0.6519,0.0,-0.156,-0.3046,0.0,0.156,-0.1557,0.0,0.1557,0.3046,-0.3049,-0.1487,0.0,0.1487,0.3049,0.4121,0.5603,0.4526,0.3039,0.5792,0.7049,0.4519,0.5773,0.7038,0.7968,0.2744,0.4003,0.5481,0.6409,0.7676,0.8149,0.7583,0.5843,0.3438,0.6628,0.5843,0.435,0.3568,0.435,0.3438,0.1696,0.0915,0.183,0.0915,0.1696,0.0916,-0.0916,-0.0915,-0.0915,-0.1696,-0.3438,-0.183,-0.3568,-0.435,-0.5843,-0.1696,-0.3438,-0.435,-0.5843,-0.6628,-0.7583,0.4121,0.1487,-0.1487,0.3049,0.3046,0.0,-0.0,0.1557,0.1559,-0.3049,-0.3046,-0.1557,-0.156,0.0,0.0,-0.8149,-0.6409,-0.4003,-0.7676,-0.7968,-0.5481,-0.5773,-0.7038,-0.7049,-0.2743,-0.3039,-0.4519,-0.4526,-0.5792,-0.5603},\n        {-0.9878,-0.5545,-0.9878,-0.9878,-0.9878,-0.3987,-0.3987,-0.3987,-0.3987,-0.3987,-0.3024,-0.3024,-0.3024,-0.3024,-0.3024,0.5545,0.5545,0.5545,0.5545,0.5545,0.9878,0.9158,0.7594,0.9575,0.9158,0.8363,0.7947,0.8363,0.7594,0.6369,0.5955,0.6726,0.5955,0.6369,0.5545,0.9878,0.9158,0.7594,0.9575,0.9158,0.8363,0.7947,0.8363,0.7594,0.6369,0.5955,0.6726,0.5955,0.6369,0.5545,0.9878,0.9158,0.7594,0.9575,0.9158,0.8363,0.7947,0.8363,0.7594,0.6369,0.5955,0.6726,0.5955,0.6369,0.5545,0.9878,0.9158,0.7594,0.9575,0.9158,0.8363,0.7947,0.8363,0.7594,0.6369,0.5955,0.6726,0.5955,0.6369,0.5545,0.9878,0.9158,0.7594,0.9575,0.9158,0.8363,0.7947,0.8363,0.7594,0.6369,0.5955,0.6726,0.5955,0.6369,0.5545,0.3987,0.1745,-0.0784,0.3485,0.4399,0.0962,0.1876,0.3611,0.4399,-0.1702,-0.0784,0.0962,0.1745,0.3485,0.3987,0.3987,0.1745,-0.0784,0.3485,0.4399,0.0962,0.1876,0.3611,0.4399,-0.1702,-0.0784,0.0962,0.1745,0.3485,0.3987,0.3987,0.1745,-0.0784,0.3485,0.4399,0.0962,0.1876,0.3611,0.4399,-0.1702,-0.0784,0.0962,0.1745,0.3485,0.3987,0.3987,0.1745,-0.0784,0.3485,0.4399,0.0962,0.1876,0.3611,0.4399,-0.1702,-0.0784,0.0962,0.1745,0.3485,0.3987,0.3987,0.1745,-0.0784,0.3485,0.4399,0.0962,0.1876,0.3611,0.4399,-0.1702,-0.0784,0.0962,0.1745,0.3485,0.3987,0.3024,0.0784,-0.1745,0.1702,0.0784,-0.0962,-0.1876,-0.0962,-0.1745,-0.3485,-0.4399,-0.3611,-0.4399,-0.3485,-0.3987,0.3024,0.0784,-0.1745,0.1702,0.0784,-0.0962,-0.1876,-0.0962,-0.1745,-0.3485,-0.4399,-0.3611,-0.4399,-0.3485,-0.3987,0.3024,0.0784,-0.1745,0.1702,0.0784,-0.0962,-0.1876,-0.0962,-0.1745,-0.3485,-0.4399,-0.3611,-0.4399,-0.3485,-0.3987,0.3024,0.0784,-0.1745,0.1702,0.0784,-0.0962,-0.1876,-0.0962,-0.1745,-0.3485,-0.4399,-0.3611,-0.4399,-0.3485,-0.3987,0.3024,0.0784,-0.1745,0.1702,0.0784,-0.0962,-0.1876,-0.0962,-0.1745,-0.3485,-0.4399,-0.3611,-0.4399,-0.3485,-0.3987,-0.5545,-0.7594,-0.9158,-0.6369,-0.5955,-0.8363,-0.7947,-0.6726,-0.5955,-0.9575,-0.9158,-0.8363,-0.7594,-0.6369,-0.5545,-0.5545,-0.7594,-0.9158,-0.6369,-0.5955,-0.8363,-0.7947,-0.6726,-0.5955,-0.9575,-0.9158,-0.8363,-0.7594,-0.6369,-0.5545,-0.5545,-0.7594,-0.9158,-0.6369,-0.5955,-0.8363,-0.7947,-0.6726,-0.5955,-0.9575,-0.9158,-0.8363,-0.7594,-0.6369,-0.5545,-0.5545,-0.5955,-0.5955,-0.6369,-0.7594,-0.6726,-0.7947,-0.8363,-0.9158,-0.6369,-0.7594,-0.8363,-0.9158,-0.9575,-0.9878,-0.5545,-0.7594,-0.9158,-0.6369,-0.5955,-0.8363,-0.7947,-0.6726,-0.5955,-0.9575,-0.9158,-0.8363,-0.7594,-0.6369,-0.5545}\n    },\n    shapes = {\n        {{1,16,15},{2,18,24},{1,15,30},{1,30,36},{1,36,25},{2,24,45},{3,21,51},{4,33,57},{5,39,63},{6,42,69},{2,45,52},{3,51,58},{4,57,64},{5,63,70},{6,69,46},{7,75,90},{8,78,96},{9,81,99},{10,84,102},{11,87,91},{93,100,12},{92,103,93},{91,104,92},{93,103,100},{103,101,100},{92,104,103},{104,105,103},{103,105,101},{105,102,101},{91,87,104},{87,86,104},{104,86,105},{86,85,105},{105,85,102},{85,10,102},{100,97,12},{101,106,100},{102,107,101},{100,106,97},{106,98,97},{101,107,106},{107,108,106},{106,108,98},{108,99,98},{102,84,107},{84,83,107},{107,83,108},{83,82,108},{108,82,99},{82,9,99},{97,94,12},{98,109,97},{99,110,98},{97,109,94},{109,95,94},{98,110,109},{110,111,109},{109,111,95},{111,96,95},{99,81,110},{81,80,110},{110,80,111},{80,79,111},{111,79,96},{79,8,96},{94,88,12},{95,112,94},{96,113,95},{94,112,88},{112,89,88},{95,113,112},{113,114,112},{112,114,89},{114,90,89},{96,78,113},{78,77,113},{113,77,114},{77,76,114},{114,76,90},{76,7,90},{88,93,12},{89,115,88},{90,116,89},{88,115,93},{115,92,93},{89,116,115},{116,117,115},{115,117,92},{117,91,92},{90,75,116},{75,74,116},{116,74,117},{74,73,117},{117,73,91},{73,11,91},{48,87,11},{47,118,48},{46,119,47},{48,118,87},{118,86,87},{47,119,118},{119,120,118},{118,120,86},{120,85,86},{46,69,119},{69,68,119},{119,68,120},{68,67,120},{120,67,85},{67,10,85},{72,84,10},{71,121,72},{70,122,71},{72,121,84},{121,83,84},{71,122,121},{122,123,121},{121,123,83},{123,82,83},{70,63,122},{63,62,122},{122,62,123},{62,61,123},{123,61,82},{61,9,82},{66,81,9},{65,124,66},{64,125,65},{66,124,81},{124,80,81},{65,125,124},{125,126,124},{124,126,80},{126,79,80},{64,57,125},{57,56,125},{125,56,126},{56,55,126},{126,55,79},{55,8,79},{60,78,8},{59,127,60},{58,128,59},{60,127,78},{127,77,78},{59,128,127},{128,129,127},{127,129,77},{129,76,77},{58,51,128},{51,50,128},{128,50,129},{50,49,129},{129,49,76},{49,7,76},{54,75,7},{53,130,54},{52,131,53},{54,130,75},{130,74,75},{53,131,130},{131,132,130},{130,132,74},{132,73,74},{52,45,131},{45,44,131},{131,44,132},{44,43,132},{132,43,73},{43,11,73},{67,72,10},{68,133,67},{69,134,68},{67,133,72},{133,71,72},{68,134,133},{134,135,133},{133,135,71},{135,70,71},{69,42,134},{42,41,134},{134,41,135},{41,40,135},{135,40,70},{40,5,70},{61,66,9},{62,136,61},{63,137,62},{61,136,66},{136,65,66},{62,137,136},{137,138,136},{136,138,65},{138,64,65},{63,39,137},{39,38,137},{137,38,138},{38,37,138},{138,37,64},{37,4,64},{55,60,8},{56,139,55},{57,140,56},{55,139,60},{139,59,60},{56,140,139},{140,141,139},{139,141,59},{141,58,59},{57,33,140},{33,32,140},{140,32,141},{32,31,141},{141,31,58},{31,3,58},{49,54,7},{50,142,49},{51,143,50},{49,142,54},{142,53,54},{50,143,142},{143,144,142},{142,144,53},{144,52,53},{51,21,143},{21,20,143},{143,20,144},{20,19,144},{144,19,52},{19,2,52},{43,48,11},{44,145,43},{45,146,44},{43,145,48},{145,47,48},{44,146,145},{146,147,145},{145,147,47},{147,46,47},{45,24,146},{24,23,146},{146,23,147},{23,22,147},{147,22,46},{22,6,46},{27,42,6},{26,148,27},{25,149,26},{27,148,42},{148,41,42},{26,149,148},{149,150,148},{148,150,41},{150,40,41},{25,36,149},{36,35,149},{149,35,150},{35,34,150},{150,34,40},{34,5,40},{34,39,5},{35,151,34},{36,152,35},{34,151,39},{151,38,39},{35,152,151},{152,153,151},{151,153,38},{153,37,38},{36,30,152},{30,29,152},{152,29,153},{29,28,153},{153,28,37},{28,4,37},{28,33,4},{29,154,28},{30,155,29},{28,154,33},{154,32,33},{29,155,154},{155,156,154},{154,156,32},{156,31,32},{30,15,155},{15,14,155},{155,14,156},{14,13,156},{156,13,31},{13,3,31},{22,27,6},{23,157,22},{24,158,23},{22,157,27},{157,26,27},{23,158,157},{158,159,157},{157,159,26},{159,25,26},{24,18,158},{18,17,158},{158,17,159},{17,16,159},{159,16,25},{16,1,25},{13,21,3},{14,160,13},{15,161,14},{13,160,21},{160,20,21},{14,161,160},{161,162,160},{160,162,20},{162,19,20},{15,16,161},{16,17,161},{161,17,162},{17,18,162},{162,18,19},{18,2,19}},\n        {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320},\n        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},\n        {nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil}\n    },\n    colors = {}\n}]]\n\n--Define the mesh\n_mesh = {\n    size = {0,0,0},\n    vertices = {\n        {},\n        {},\n        {}\n    },\n    normals = {\n        {},\n        {},\n        {}\n    },\n    shapes = {\n        {},\n        {},\n        {},\n        {}\n    },\n    buffer = {},\n    depth = {}\n}\n\n--Set model global\nlocal sV, sN, sS = #_mesh.vertices[1],#_mesh.normals[1],#_mesh.shapes[1]\n_model = {\n    size = {sV, sN, sS},\n    vertices = {\n        {},\n        {},\n        {}\n    },\n    normals = {\n        {},\n        {},\n        {}\n    },\n    shapes = {\n        {},\n        {},\n        {},\n        {}\n    },\n    buffer = {},\n    depth = {}\n}\n\n-- Define global parameters\n_width = system.getScreenWidth()\n_height = system.getScreenHeight()\n_vFov = system.getCameraVerticalFov()\n\n_near = 0.01\n_far = 1000.0\n-- To recompute on regular time\n_aspectRatio = _height/_width\n_tanFov = 1.0/math.tan(math.rad(_vFov)*0.5)\n_field = -_far/(_far-_near)\n\n--Set the computation tick\nunit.setTimer('compute', 0.00001)\nsystem.showHelper(0)\nsystem.showScreen(1)\n\n\n_fpsTime = system.getTime()\n_compTime = system.getTime()\n_rendTime = system.getTime()","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"\n-- Localisation\nlocal cos, sin, tan = math.cos, math.sin, math.tan\nlocal deg, rad = math.deg, math.rad\nlocal getCamPos, getTime = system.getCameraPos, system.getTime\nlocal getCamFwd, getCamRgt, getCamUp = system.getCameraForward, system.getCameraRight, system.getCameraUp\n\nlocal t0 = getTime()\n\n-- Get screen data\nlocal width = _width\nlocal height = _height\nlocal vFov = _vFov\n\nlocal tanFov, field = _tanFov, _field\nlocal af = _aspectRatio*tanFov\nlocal nq = _near*field\n\n\n-- Get camera data\nlocal pos = getCamPos()\nlocal camX, camY, camZ = pos[1], pos[2], pos[3]\nlocal fwd = getCamFwd()\nlocal camFwdX, camFwdY, camFwdZ = fwd[1], fwd[2], fwd[3]\nlocal rgt = getCamRgt()\nlocal camRgtX, camRgtY, camRgtZ = rgt[1], rgt[2], rgt[3]\nlocal up = getCamUp()\nlocal camUpX, camUpY, camUpZ = up[1], up[2], up[3]\n\n-- Set mesh properties\nlocal yaw, pitch, roll = 0, 0, 0\nlocal oX, oY, oZ = -0.125, 11.875, -0.125\nlocal scale = 10\n\n-- Set model\nlocal nMX, nMY, nMZ = _mesh.normals[1], _mesh.normals[2], _mesh.normals[3]\nlocal vMX, vMY, vMZ = _mesh.vertices[1], _mesh.vertices[2], _mesh.vertices[3]\nlocal sMV, sMN = _mesh.shapes[1], _mesh.shapes[2]\n\nlocal nN, nS = #nMX,#sMV\n_model = {\n    vertices = {\n        {},\n        {},\n        {}\n    },\n    normals = {\n        {},\n        {},\n        {}\n    },\n    shapes = {\n        {},\n        {},\n        {},\n        {}\n    },\n    buffer = {},\n    depth = {}\n}\nlocal vX, vY, vZ = _model.vertices[1], _model.vertices[2], _model.vertices[3]\nlocal nX, nY, nZ = _model.normals[1], _model.normals[2], _model.normals[3]\nlocal sV, sN, sC, sDot = _model.shapes[1], _model.shapes[2], _model.shapes[3], _model.shapes[4]\nlocal B, D = _model.buffer, _model.depth\n\n-- Precompute cos and sin\nlocal cy, sy = cos(yaw), sin(yaw)\nlocal cp, sp = cos(pitch), sin(pitch)\nlocal cr, sr = cos(roll), sin(roll)\n\nlocal cycp, sycp = cy*cp, sy*cp\nlocal cyspsr_sycr, syspsr_cycr, cpsr = cy*sp*sr - sy*cr, sy*sp*sr + cy*cr, cp*sr\nlocal cyspcr_sysr, syspcr_cysr, cpcr = cy*sp*cr + sy*sr, sy*sp*cr - cy*sr, cp*cr\n\nlocal dX, dY, dZ = oX - camX, oY - camY, oZ - camZ\n\n-- Precompute 2\n\nlocal Mxx, Myx, Mzx, Mwx =              cycp*camRgtX + sycp*camFwdX + (-sp)*camUpX,              cycp*camRgtY + sycp*camFwdY + (-sp)*camUpY,              cycp*camRgtZ + sycp*camFwdZ + (-sp)*camUpZ, dX*camRgtX + dY*camRgtY + dZ*camRgtZ\nlocal Mxy, Myy, Mzy, Mwy = cyspsr_sycr*camRgtX + syspsr_cycr*camFwdX + cpsr*camUpX, cyspsr_sycr*camRgtY + syspsr_cycr*camFwdY + cpsr*camUpY, cyspsr_sycr*camRgtZ + syspsr_cycr*camFwdZ + cpsr*camUpZ, dX*camFwdX + dY*camFwdY + dZ*camFwdZ\nlocal Mxz, Myz, Mzz, Mwz = cyspcr_sysr*camRgtX + syspcr_cysr*camFwdX + cpcr*camUpX, cyspcr_sysr*camRgtY + syspcr_cysr*camFwdY + cpcr*camUpY, cyspcr_sysr*camRgtZ + syspcr_cysr*camFwdZ + cpcr*camUpZ,    dX*camUpX + dY*camUpY + dZ*camUpZ\nlocal Mxw, Myw, Mzw, Mww = 0, 0, 0, 1\n\nlocal MVxx, MVyx, MVzx, MVwx =      af*Mxx,      af*Myx,      af*Mzx,          af*Mwx\nlocal MVxy, MVyy, MVzy, MVwy = -tanFov*Mxz, -tanFov*Myz, -tanFov*Mzz,     -tanFov*Mwz\nlocal MVxz, MVyz, MVzz, MVwz =  -field*Mxy,  -field*Mxy,  -field*Mxy, -field*Mxy + nq\nlocal MVxw, MVyw, MVzw, MVww =         Mxz,         Myz,         Mzz,             Mwz\n\nlocal MCVxx, MCVyx, MCVzx, MCVwx =     af*camRgtX,     af*camRgtY,     af*camRgtZ,   0\nlocal MCVxy, MCVyy, MCVzy, MCVwy = -tanFov*camUpX, -tanFov*camUpY, -tanFov*camUpZ,   0\nlocal MCVxz, MCVyz, MCVzz, MCVwz = -field*camFwdX, -field*camFwdY, -field*camFwdZ,  nq\nlocal MCVxw, MCVyw, MCVzw, MCVww =         camUpX,         camUpY,         camUpZ,   0\n\n-- Compute normals\nfor i=1,nN do\n    local nx, ny, nz = nMX[i], nMY[i], nMZ[i]\n\n    --Rotation\n    nX[i] = nx*cycp + ny*sycp + nz*(-sp)\n    nY[i] = nx*cyspsr_sycr + ny*syspsr_cycr + nz*cpsr\n    nZ[i] = nx*cyspcr_sysr + ny*syspcr_cysr + nz*cpcr\nend\n\n\n-- Compute vertices\nlocal shapeId = 1\n_vertexId = 0\n\n\nlocal vx, vy, vz = 0, 0, 0 \nfor i = 1,nS do\n    local depth, dot = 0, 0\n    local vIds, nId = sMV[i], sMN[i]\n    local index, maxIndex = 1, #vIds\n\n    --# Compute the first vertice position for back-face culling\n    if nId then        \n        local id = vIds[index]\n\n        --Local rotations YAW, PITCH, ROLL & positionning\n        local vxT, vyT, vzT = vMX[id]*scale, vMY[id]*scale, vMZ[id]*scale\n        \n        local vx = vxT*cycp + vyT*sycp + vzT*(-sp) + dX\n        local vy = vxT*cyspsr_sycr + vyT*syspsr_cycr + vzT*cpsr + dY\n        local vz = vxT*cyspcr_sysr + vyT*syspcr_cysr + vzT*cpcr + dZ\n\n        -- Compute dot product with normal\n        local len = (vx*vx+vy*vy+vz*vz)^(-0.5)\n        dot = vx*len*nMX[nId] + vy*len*nMY[nId] + vz*len*nMZ[nId]\n        sDot[nId] = dot\n\n        if dot >= 0 then goto skipShape end\n\n        if vX[id] then\n            vz = vZ[id]\n        else\n            --Project camera referential\n            vxT, vyT, vzT = vx, vy, vz\n\n            vy = vxT * camFwdX + vyT * camFwdY + vzT * camFwdZ\n            if vy < 0.01 then goto skipShape end\n            local ivy = 1/vy\n            \n            --Project vertice from 3D -> 2D\n            --Matrix Proj.View\n            vX[id] = (vxT * MCVxx + vyT * MCVyx + vzT * MCVzx + MCVwx)*ivy \n            vY[id] = (vxT * MCVxy + vyT * MCVyy + vzT * MCVzy + MCVwy)*ivy \n            vz = (vxT * MCVxz + vyT * MCVyz + vzT * MCVzz + MCVwz)*ivy \n            vZ[id] = vz\n            \n            _vertexId = _vertexId +1\n        end\n\n        depth = depth + vz\n        index = 2\n    end\n\n    for j=index,maxIndex do\n        local id = vIds[j]\n\n        if vX[id] then\n            vz = vZ[id]\n        else\n            --Compute this vertice\n            vx, vy, vz = vMX[id]*scale, vMY[id]*scale, vMZ[id]*scale\n            local vxT, vyT, vzT = vx, vy, vz\n            \n            --Local rotations YAW, PITCH, ROLL & Positionning & Projection to camera \n            --Matrix View.Trans\n            vy = vxT * Mxy + vyT * Myy + vzT * Mzy + Mwy\n            if vy < 0.01 then goto skipShape end\n\n            --Project vertice from 3D -> 2D\n            --Matrix Proj.View  \n            local ivy = 1/vy\n            \n            vX[id] = (vxT * MVxx + vyT * MVyx + vzT * MVzx + MVwx)*ivy \n            vY[id] = (vxT * MVxy + vyT * MVyy + vzT * MVzy + MVwy)*ivy \n            vz = (vxT * MVxz + vyT * MVyz + vzT * MVzz + MVwz)*ivy \n            vZ[id] = vz\n            \n            _vertexId = _vertexId +1            \n        end\n\n        depth = depth + vz\n    end\n\n    local iMaxIndex = 1/maxIndex\n    \n    --if depth >= 0 then\n        depth = depth*iMaxIndex\n        \n        local col = _mesh.colors[nId]\n        if not col then col = {180,40,40} end\n\n        sV[shapeId] = vIds\n        sN[shapeId] = nId\n        sC[shapeId] = {\n                col[1] + 40*(0.5-dot),\n                col[2] + 40*(0.5-dot),\n                col[3] + 40*(0.5-dot)\n            }\n\n        D[shapeId] = depth\n        B[depth] = shapeId\n        shapeId = shapeId+1\n    --end\n\n    ::skipShape::\nend\n\nlocal sort = table.sort\nsort(D)\n_compTime = getTime() - t0","filter":{"args":[{"value":"compute"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"--Code here","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":4},{"code":"if not _model then return end\n\nlocal t0 = system.getTime()\nlocal memory = collectgarbage(\"count\")\nlocal fps = 1/(t0-_fpsTime)\n_fpsTime = t0\n\n--=============================\nlocal format, concat, remove = string.format, table.concat, table.remove\n\nlocal width, height = _width, _height\nlocal w2, h2 = width*0.5, height*0.5\n\nlocal index, pattern = 2, ''\nlocal X, Y = _model.vertices[1], _model.vertices[2]\nlocal sV, sN, sC = _model.shapes[1], _model.shapes[2], _model.shapes[3]\nlocal buffer, depth = _model.buffer, _model.depth\nlocal nd = #depth\n\n\nlocal result = {format([[<style>\n        #render text { font: 12px sans-serif}\n        #render path{ stroke:#eee}\n        #render line{ stroke:#eee}\n        #render text{ fill:#fff}\n        #render polygon{ stroke:currentColor; fill:currentColor; stroke-width:1; stroke-linecap:butt }\n        </style>\n        <svg id=\"render\" style=\"position: absolute; left:0px; top:0px\" viewBox=\"0 0 %.1f %.1f\" >\n        <text x=6 y=12 >FPS : %.1f</text>\n        <text x=6 y=30 >Mem. : %.1fKB</text>\n        <text x=6 y=48 >Comp. : %.4fms</text>\n        <text x=6 y=66 >Rend. : %.4fms</text>\n        <text x=6 y=84 >Vert. : %d/%d</text>\n        <text x=6 y=102 >Shap. : %d/%d</text>]], width, height, fps, memory, _compTime*1000, _rendTime*1000, _vertexId or 0, #_mesh.vertices[1], #sV, #_mesh.shapes[1])}\n\n\nfor i = nd,1,-1 do\n    local shapeId = buffer[depth[i]]\n    local vIds, isLine, col = sV[shapeId], sN[shapeId] == nil, sC[shapeId]\n    local n = #vIds\n\n    if n == 2 then\n        local v1, v2 = vIds[1], vIds[2]\n        result[index] = format([[<line x1=%.1f y1=%.1f x2=%.1f y2=%.1f />]], (1 + X[v1])*w2, (1 + Y[v1])*h2, (1 + X[v2])*w2, (1 + Y[v2])*h2)\n\n    elseif n == 3 and not isLine then\n        local v1, v2, v3 = vIds[1], vIds[2], vIds[3]\n        result[index] = format([[<polygon color=rgb(%.0f,%.0f,%.0f) points=\"%.1f %.1f,%.1f %.1f,%.1f %.1f\"/>]], col[1], col[2], col[3], (1 + X[v1])*w2, (1 + Y[v1])*h2, (1 + X[v2])*w2, (1 + Y[v2])*h2, (1 + X[v3])*w2, (1 + Y[v3])*h2)\n\n    else\n        if isLine then\n            result[index] = format([[<path d=\"M]], col[1], col[2], col[3])\n            for j = 1,n do\n                local id = vIds[j]\n\n                if j<n then pattern = '%.1f %.1fL'\n                else pattern = '%.1f %.1fZ' end\n                \n                result[index+j] = format(pattern, (X[id] +1.0) * w2, (Y[id] +1.0) * h2)\n            end\n            result[index+n] = [[\"/>]]\n        else\n            result[index] = format([[<polygon color=rgb(%.0f,%.0f,%.0f) points=\"]], col[1], col[2], col[3])\n            for j = 1,n do\n                local id = vId[j]\n\n                if j<n then pattern = '%.1f %.1f,'\n                else pattern = '%.1f %.1f' end\n                result[index+j] = format(pattern, (X[id] +1.0) * w2, (Y[id] +1.0) * h2)\n            end\n        end\n    end\n    index = #result+1\nend\nresult[index] = '</svg>'\n\nsystem.setScreen(concat(result))\n\n_rendTime = system.getTime() - t0","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"2"}],"methods":[],"events":[]}
